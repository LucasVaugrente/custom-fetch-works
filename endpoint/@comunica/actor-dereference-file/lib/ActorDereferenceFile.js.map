{"version":3,"file":"ActorDereferenceFile.js","sourceRoot":"","sources":["ActorDereferenceFile.ts"],"names":[],"mappings":";;;AAAA,qCAAkE;AAClE,uCAAwD;AAExD,+DAA6D;AAE7D,yCAAwD;AAExD;;GAEG;AACH,MAAa,oBAAqB,SAAQ,kCAAgB;IACxD,YAAmB,IAA2B;QAC5C,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG,EAAsB;QAC3C,IAAI,CAAC;YACH,IAAA,oBAAU,EAAC,OAAO,CAAC,GAAG,CAAC,EAAE,mBAAS,CAAC,IAAI,CAAC,CAAC;QAC3C,CAAC;QAAC,OAAO,KAAc,EAAE,CAAC;YACxB,4DAA4D;YAC5D,OAAO,IAAA,eAAQ,EAAC,mDAAmD,KAAK,GAAG,CAAC,CAAC;QAC/E,CAAC;QACD,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEO,MAAM,CAAC,KAAK,CAAC,GAAW;QAC9B,MAAM,QAAQ,GAAG,gBAAgB,CAAC;QAClC,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC;IACrC,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,EAAE,GAAG,EAAsB;QAC1C,MAAM,gBAAgB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACpC,OAAO;YACL,IAAI,EAAE,IAAA,0BAAgB,EAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACpC,8DAA8D;YAC9D,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,gBAAgB;YAC1C,MAAM,EAAE,IAAI;YACZ,GAAG,EAAE,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAA,wBAAa,EAAC,GAAG,CAAC,CAAC,IAAI;SACrE,CAAC;IACJ,CAAC;CACF;AA9BD,oDA8BC;AAED,MAAM,OAAO,GAAG,CAAC,GAAW,EAAU,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAA,wBAAa,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC","sourcesContent":["import { accessSync, createReadStream, constants } from 'node:fs';\nimport { fileURLToPath, pathToFileURL } from 'node:url';\nimport type { IActionDereference, IActorDereferenceArgs, IActorDereferenceOutput } from '@comunica/bus-dereference';\nimport { ActorDereference } from '@comunica/bus-dereference';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { failTest, passTestVoid } from '@comunica/core';\n\n/**\n * A comunica File Dereference Actor.\n */\nexport class ActorDereferenceFile extends ActorDereference {\n  public constructor(args: IActorDereferenceArgs) {\n    super(args);\n  }\n\n  public async test({ url }: IActionDereference): Promise<TestResult<IActorTest>> {\n    try {\n      accessSync(getPath(url), constants.F_OK);\n    } catch (error: unknown) {\n      // eslint-disable-next-line ts/restrict-template-expressions\n      return failTest(`This actor only works on existing local files. (${error})`);\n    }\n    return passTestVoid();\n  }\n\n  private static isURI(str: string): boolean {\n    const URIRegex = /\\w[\\w+.-]*:.*/u;\n    return URIRegex.exec(str) !== null;\n  }\n\n  public async run({ url }: IActionDereference): Promise<IActorDereferenceOutput> {\n    const requestTimeStart = Date.now();\n    return {\n      data: createReadStream(getPath(url)),\n      // This should always be after the creation of the read stream\n      requestTime: Date.now() - requestTimeStart,\n      exists: true,\n      url: ActorDereferenceFile.isURI(url) ? url : pathToFileURL(url).href,\n    };\n  }\n}\n\nconst getPath = (url: string): string => url.startsWith('file://') ? fileURLToPath(url) : url;\n"]}