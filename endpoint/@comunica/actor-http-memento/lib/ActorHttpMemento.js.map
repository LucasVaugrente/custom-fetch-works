{"version":3,"file":"ActorHttpMemento.js","sourceRoot":"","sources":["ActorHttpMemento.ts"],"names":[],"mappings":";;;AACA,iDAA+C;AAC/C,+DAA4D;AAE5D,yCAAwD;AACxD,uDAAyC;AAEzC;;GAEG;AACH,MAAa,gBAAiB,SAAQ,oBAAS;IAG7C,YAAmB,IAA2B;QAC5C,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAmB;QACnC,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,iCAAe,CAAC,QAAQ,CAAC;YAC5C,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,iCAAe,CAAC,QAAQ,CAAC,YAAY,IAAI,CAAC,EAAE,CAAC;YACpE,OAAO,IAAA,eAAQ,EAAC,4DAA4D,CAAC,CAAC;QAChF,CAAC;QACD,IAAI,MAAM,CAAC,IAAI,IAAI,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE,CAAC;YAC3E,OAAO,IAAA,eAAQ,EAAC,yCAAyC,CAAC,CAAC;QAC7D,CAAC;QACD,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAmB;QAClC,uEAAuE;QACvE,MAAM,IAAI,GAAgB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAChE,MAAM,OAAO,GAAY,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;QAExE,MAAM,QAAQ,GAAqB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,iCAAe,CAAC,QAAQ,CAAC,CAAC;QAChF,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO,CAAC,MAAM,CAAC,iBAAiB,EAAE,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;QAC5D,CAAC;QAED,MAAM,UAAU,GAAgB,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC;QAEvF,wEAAwE;QACxE,MAAM,MAAM,GAAqB,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAE7E,uEAAuE;QACvE,IAAI,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,CAAC;YAChG,mDAAmD;YACnD,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC1C,MAAM,QAAQ,GAAG,MAAM,IAAI,IAAA,wBAAK,EAAC,MAAM,CAAC,EAAE,GAAG,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;YACjE,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACpC,MAAM,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC;gBAC5B,oEAAoE;gBACpE,MAAM,UAAU,GAAgB,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC;gBAC1F,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAC/C,CAAC;QACH,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAhDD,4CAgDC","sourcesContent":["import type { IActionHttp, IActorHttpArgs, IActorHttpOutput, MediatorHttp } from '@comunica/bus-http';\nimport { ActorHttp } from '@comunica/bus-http';\nimport { KeysHttpMemento } from '@comunica/context-entries';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { failTest, passTestVoid } from '@comunica/core';\nimport { parse } from 'http-link-header';\n\n/**\n * A comunica Memento Http Actor.\n */\nexport class ActorHttpMemento extends ActorHttp {\n  public readonly mediatorHttp: MediatorHttp;\n\n  public constructor(args: IActorHttpMementoArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionHttp): Promise<TestResult<IActorTest>> {\n    if (!(action.context.has(KeysHttpMemento.datetime) &&\n          action.context.get(KeysHttpMemento.datetime) instanceof Date)) {\n      return failTest('This actor only handles request with a set valid datetime.');\n    }\n    if (action.init && new Headers(action.init.headers).has('accept-datetime')) {\n      return failTest('The request already has a set datetime.');\n    }\n    return passTestVoid();\n  }\n\n  public async run(action: IActionHttp): Promise<IActorHttpOutput> {\n    // Duplicate the ActionHttp to append a datetime header to the request.\n    const init: RequestInit = action.init ? { ...action.init } : {};\n    const headers: Headers = init.headers = new Headers(init.headers ?? {});\n\n    const dateTime: Date | undefined = action.context.get(KeysHttpMemento.datetime);\n    if (dateTime) {\n      headers.append('accept-datetime', dateTime.toUTCString());\n    }\n\n    const httpAction: IActionHttp = { context: action.context, input: action.input, init };\n\n    // Execute the request and follow the timegate in the response (if any).\n    const result: IActorHttpOutput = await this.mediatorHttp.mediate(httpAction);\n\n    // Did we ask for a time-negotiated response, but haven't received one?\n    if (headers.has('accept-datetime') && result.headers && !result.headers.has('memento-datetime')) {\n      // The links might have a timegate that can help us\n      const header = result.headers.get('link');\n      const timegate = header && parse(header)?.get('rel', 'timegate');\n      if (timegate && timegate.length > 0) {\n        await result.body?.cancel();\n        // Respond with a time-negotiated response from the timegate instead\n        const followLink: IActionHttp = { context: action.context, input: timegate[0].uri, init };\n        return this.mediatorHttp.mediate(followLink);\n      }\n    }\n\n    return result;\n  }\n}\n\nexport interface IActorHttpMementoArgs extends IActorHttpArgs {\n  /**\n   * The HTTP mediator\n   */\n  mediatorHttp: MediatorHttp;\n}\n"]}