{"version":3,"file":"ActorIteratorTransformRecordIntermediateResults.js","sourceRoot":"","sources":["ActorIteratorTransformRecordIntermediateResults.ts"],"names":[],"mappings":";;;AAOA,6EAA0E;AAC1E,+DAA2D;AAE3D,yCAA8C;AAM9C;;;GAGG;AACH,MAAa,+CAAgD,SAAQ,+CAAsB;IACzF,YAAmB,IAAiC;QAClD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,yBAAyB,CAAC,MAAwC;QAE7E,MAAM,4BAA4B,GAAkC,MAAM,CAAC,OAAO;aAC/E,OAAO,CAAC,gCAAc,CAAC,mBAAmB,CAAC,CAAC;QAC/C,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACxC,4BAA4B,CAAC,eAAe,CAC1C;gBACE,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,IAAI;gBACJ,QAAQ,EAAE;oBACR,SAAS,EAAE,MAAM,CAAC,SAAS;oBAC3B,QAAQ,EAAE,MAAM,CAAC,QAAQ;iBAC1B;aACF,CACF,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;QACH,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC;IACvD,CAAC;IAEM,KAAK,CAAC,sBAAsB,CAAC,MAAqC;QAEvE,MAAM,4BAA4B,GAAkC,MAAM,CAAC,OAAO;aAC/E,OAAO,CAAC,gCAAc,CAAC,mBAAmB,CAAC,CAAC;QAC/C,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACxC,4BAA4B,CAAC,eAAe,CAC1C;gBACE,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,IAAI;gBACJ,QAAQ,EAAE;oBACR,SAAS,EAAE,MAAM,CAAC,SAAS;oBAC3B,QAAQ,EAAE,MAAM,CAAC,QAAQ;iBAC1B;aACF,CACF,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;QACH,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC;IACvD,CAAC;IAEM,KAAK,CAAC,qBAAqB,CAAC,OAAgC;QAEjE,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;CACF;AAjDD,0GAiDC","sourcesContent":["import type {\n  ActionIteratorTransform,\n  IActionIteratorTransformBindings,\n  IActionIteratorTransformQuads,\n  IActorIteratorTransformArgs,\n  ITransformIteratorOutput }\n  from '@comunica/bus-iterator-transform';\nimport { ActorIteratorTransform } from '@comunica/bus-iterator-transform';\nimport { KeysStatistics } from '@comunica/context-entries';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { passTestVoid } from '@comunica/core';\nimport type { StatisticIntermediateResults } from '@comunica/statistic-intermediate-results';\nimport type { MetadataBindings, MetadataQuads } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\n\n/**\n * A comunica Record Intermediate Results Iterator Transform Actor.\n * This actor updates the intermediate result statistic when an intermediate result is produced.\n */\nexport class ActorIteratorTransformRecordIntermediateResults extends ActorIteratorTransform {\n  public constructor(args: IActorIteratorTransformArgs) {\n    super(args);\n  }\n\n  public async transformIteratorBindings(action: IActionIteratorTransformBindings):\n  Promise<ITransformIteratorOutput<AsyncIterator<RDF.Bindings>, MetadataBindings>> {\n    const statisticIntermediateResults = <StatisticIntermediateResults> action.context\n      .getSafe(KeysStatistics.intermediateResults);\n    const output = action.stream.map((data) => {\n      statisticIntermediateResults.updateStatistic(\n        {\n          type: action.type,\n          data,\n          metadata: {\n            operation: action.operation,\n            metadata: action.metadata,\n          },\n        },\n      );\n      return data;\n    });\n    return { stream: output, metadata: action.metadata };\n  }\n\n  public async transformIteratorQuads(action: IActionIteratorTransformQuads):\n  Promise<ITransformIteratorOutput<AsyncIterator<RDF.Quad>, MetadataQuads>> {\n    const statisticIntermediateResults = <StatisticIntermediateResults> action.context\n      .getSafe(KeysStatistics.intermediateResults);\n    const output = action.stream.map((data) => {\n      statisticIntermediateResults.updateStatistic(\n        {\n          type: action.type,\n          data,\n          metadata: {\n            operation: action.operation,\n            metadata: action.metadata,\n          },\n        },\n      );\n      return data;\n    });\n    return { stream: output, metadata: action.metadata };\n  }\n\n  public async testIteratorTransform(_action: ActionIteratorTransform):\n  Promise<TestResult<IActorTest>> {\n    return passTestVoid();\n  }\n}\n"]}