{"version":3,"file":"ActorQueryProcessAnnotateSourceBinding.js","sourceRoot":"","sources":["ActorQueryProcessAnnotateSourceBinding.ts"],"names":[],"mappings":";;;AAMA,mEAAgE;AAChE,+DAAqE;AAErE,yCAA0E;AAE1E,6EAA4D;AAE5D,uDAA+C;AAE/C;;GAEG;AACH,MAAa,sCAAuC,SAAQ,qCAAiB;IAI3E,YAAmB,IAAiD;QAClE,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,WAAW,GAAG,IAAI,8BAAW,EAAE,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAA2B;QAC3C,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,2BAAmB,CAAC,EAAE,CAAC;YAC5C,OAAO,IAAA,eAAQ,EAAC,wCAAwC,CAAC,CAAC;QAC5D,CAAC;QACD,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA2B;QAC1C,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,2BAAmB,EAAE,IAAI,CAAC,CAAC;QAC9D,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;QAEzB,6CAA6C;QAC7C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC/D,oEAAoE;QACpE,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QACzF,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAEM,oBAAoB,CAAC,QAAwB;QAClD,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;YACpC,IAAI,QAAQ,YAAY,iCAAQ,EAAE,CAAC;gBACjC,6GAA6G;gBAC7G,MAAM,MAAM,GAAe,QAAQ,CAAC,eAAe,CAAC,0CAAwB,CAAC,cAAc,CAAC,CAAC;gBAC7F,MAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,CAAC;gBAC/E,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;YACtD,CAAC;YACD,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC;IACb,CAAC;CACF;AA1CD,wFA0CC;AASY,QAAA,mBAAmB,GAAG,IAAI,uBAAgB,CACrD,+DAA+D,CAChE,CAAC","sourcesContent":["import type {\n  IActionQueryProcess,\n  IActorQueryProcessOutput,\n  IActorQueryProcessArgs,\n  MediatorQueryProcess,\n} from '@comunica/bus-query-process';\nimport { ActorQueryProcess } from '@comunica/bus-query-process';\nimport { KeysMergeBindingsContext } from '@comunica/context-entries';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { failTest, passTestVoid, ActionContextKey } from '@comunica/core';\nimport type { BindingsStream } from '@comunica/types';\nimport { Bindings } from '@comunica/utils-bindings-factory';\nimport type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\n\n/**\n * A comunica Annotate Source Binding Query Process Actor.\n */\nexport class ActorQueryProcessAnnotateSourceBinding extends ActorQueryProcess {\n  private readonly dataFactory: RDF.DataFactory;\n  public readonly mediatorQueryProcess: MediatorQueryProcess;\n\n  public constructor(args: IActorQueryProcessAnnotateSourceBindingArgs) {\n    super(args);\n    this.dataFactory = new DataFactory();\n  }\n\n  public async test(action: IActionQueryProcess): Promise<TestResult<IActorTest>> {\n    if (action.context.get(KEY_CONTEXT_WRAPPED)) {\n      return failTest('Unable to query process multiple times');\n    }\n    return passTestVoid();\n  }\n\n  public async run(action: IActionQueryProcess): Promise<IActorQueryProcessOutput> {\n    const context = action.context.set(KEY_CONTEXT_WRAPPED, true);\n    action.context = context;\n\n    // Run all query processing steps in sequence\n    const output = await this.mediatorQueryProcess.mediate(action);\n    // Currently this only supports adding source provenance to bindings\n    if (output.result.type === 'bindings') {\n      output.result.bindingsStream = this.addSourcesToBindings(output.result.bindingsStream);\n    }\n    return output;\n  }\n\n  public addSourcesToBindings(iterator: BindingsStream): BindingsStream {\n    const ret = iterator.map((bindings) => {\n      if (bindings instanceof Bindings) {\n        // Get sources from bindings context. If no sources are found, this should produce binding with empty literal\n        const source = <string []> bindings.getContextEntry(KeysMergeBindingsContext.sourcesBinding);\n        const sourceAsLiteral = this.dataFactory.literal(JSON.stringify(source ?? []));\n        bindings = bindings.set('_source', sourceAsLiteral);\n      }\n      return bindings;\n    });\n\n    return ret;\n  }\n}\n\nexport interface IActorQueryProcessAnnotateSourceBindingArgs extends IActorQueryProcessArgs {\n  /**\n   * The query process mediator so we can call our wrapped actor\n   */\n  mediatorQueryProcess: MediatorQueryProcess;\n}\n\nexport const KEY_CONTEXT_WRAPPED = new ActionContextKey<boolean>(\n  '@comunica/actor-query-process-annotate-source-binding:wrapped',\n);\n"]}