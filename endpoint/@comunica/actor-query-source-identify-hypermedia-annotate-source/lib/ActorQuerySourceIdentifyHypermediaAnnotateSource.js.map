{"version":3,"file":"ActorQuerySourceIdentifyHypermediaAnnotateSource.js","sourceRoot":"","sources":["ActorQuerySourceIdentifyHypermediaAnnotateSource.ts"],"names":[],"mappings":";;;AAQA,yGAAoG;AAEpG,yCAAsE;AACtE,uFAAoF;AAEpF;;GAEG;AACH,MAAa,gDAAiD,SAAQ,yEAAkC;IAItG,YAAmB,IAA2D;QAC5E,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,YAAY,CACvB,MAA4C;QAE5C,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,2BAAmB,CAAC,EAAE,CAAC;YAC5C,OAAO,IAAA,eAAQ,EAAC,4CAA4C,CAAC,CAAC;QAChE,CAAC;QACD,OAAO,IAAA,eAAQ,EAAC,EAAE,YAAY,EAAE,MAAM,CAAC,iBAAiB,EAAE,CAAC,CAAC;IAC9D,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA4C;QAC3D,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,2BAAmB,EAAE,IAAI,CAAC,CAAC;QAC9D,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;QAEzB,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,qCAAqC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC7F,OAAO,EAAE,MAAM,EAAE,IAAI,iEAA+B,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,CAAC;IAC1E,CAAC;CACF;AAxBD,4GAwBC;AAaY,QAAA,mBAAmB,GAAG,IAAI,uBAAgB,CACrD,0EAA0E,CAC3E,CAAC","sourcesContent":["import type { MediatorMergeBindingsContext } from '@comunica/bus-merge-bindings-context';\nimport type {\n  IActionQuerySourceIdentifyHypermedia,\n  IActorQuerySourceIdentifyHypermediaOutput,\n  IActorQuerySourceIdentifyHypermediaArgs,\n  IActorQuerySourceIdentifyHypermediaTest,\n  MediatorQuerySourceIdentifyHypermedia,\n} from '@comunica/bus-query-source-identify-hypermedia';\nimport { ActorQuerySourceIdentifyHypermedia } from '@comunica/bus-query-source-identify-hypermedia';\nimport type { TestResult } from '@comunica/core';\nimport { ActionContextKey, failTest, passTest } from '@comunica/core';\nimport { QuerySourceAddSourceAttribution } from './QuerySourceAddSourceAttribution';\n\n/**\n * A comunica None Query Source Identify Hypermedia Actor.\n */\nexport class ActorQuerySourceIdentifyHypermediaAnnotateSource extends ActorQuerySourceIdentifyHypermedia {\n  public readonly mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n  public readonly mediatorQuerySourceIdentifyHypermedia: MediatorQuerySourceIdentifyHypermedia;\n\n  public constructor(args: IActorQuerySourceIdentifyHypermediaAnnotateSourceArgs) {\n    super(args, 'file');\n  }\n\n  public async testMetadata(\n    action: IActionQuerySourceIdentifyHypermedia,\n  ): Promise<TestResult<IActorQuerySourceIdentifyHypermediaTest>> {\n    if (action.context.get(KEY_CONTEXT_WRAPPED)) {\n      return failTest('Unable to wrap query source multiple times');\n    }\n    return passTest({ filterFactor: Number.POSITIVE_INFINITY });\n  }\n\n  public async run(action: IActionQuerySourceIdentifyHypermedia): Promise<IActorQuerySourceIdentifyHypermediaOutput> {\n    const context = action.context.set(KEY_CONTEXT_WRAPPED, true);\n    action.context = context;\n\n    const { source, dataset } = await this.mediatorQuerySourceIdentifyHypermedia.mediate(action);\n    return { source: new QuerySourceAddSourceAttribution(source), dataset };\n  }\n}\n\nexport interface IActorQuerySourceIdentifyHypermediaAnnotateSourceArgs extends IActorQuerySourceIdentifyHypermediaArgs {\n  /**\n   * A mediator for creating binding context merge handlers\n   */\n  mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n  /**\n   * A mediator to create the wrapped query source\n   */\n  mediatorQuerySourceIdentifyHypermedia: MediatorQuerySourceIdentifyHypermedia;\n}\n\nexport const KEY_CONTEXT_WRAPPED = new ActionContextKey<boolean>(\n  '@comunica/actor-query-source-identify-hypermedia-annotate-source:wrapped',\n);\n"]}