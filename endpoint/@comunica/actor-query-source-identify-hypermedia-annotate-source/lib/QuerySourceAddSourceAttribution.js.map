{"version":3,"file":"QuerySourceAddSourceAttribution.js","sourceRoot":"","sources":["QuerySourceAddSourceAttribution.ts"],"names":[],"mappings":";;;AAAA,+DAAqE;AASrE,6EAA4D;AAK5D;;GAEG;AACH,MAAa,+BAA+B;IAM1C,YAAmB,WAAyB;QAC1C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,OAAuB;QACnD,OAAO,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;IACpD,CAAC;IAEM,aAAa,CAClB,SAA4B,EAC5B,OAAuB,EACvB,OAA0C;QAE1C,OAAO,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;IACxG,CAAC;IAEM,4BAA4B,CAAC,QAAwB;QAC1D,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;YACpC,IAAI,QAAQ,YAAY,iCAAQ,EAAE,CAAC;gBACjC,QAAQ,GAAG,QAAQ,CAAC,eAAe,CACjC,0CAAwB,CAAC,cAAc,EACvC,CAAE,IAAI,CAAC,WAAW,CAAC,cAAc,CAAE,CACpC,CAAC;YACJ,CAAC;YACD,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC,CAAC;QAEH,SAAS,eAAe;YACtB,QAAQ,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,QAA0B,EAAE,EAAE;gBAC9D,GAAG,CAAC,WAAW,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;gBACtC,QAAQ,CAAC,KAAK,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC;QACL,CAAC;QACD,eAAe,EAAE,CAAC;QAElB,OAAO,GAAG,CAAC;IACb,CAAC;IAEM,YAAY,CAAC,SAAsB,EAAE,OAAuB;QACjE,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC3D,CAAC;IAEM,UAAU,CAAC,SAA4B,EAAE,OAAuB;QACrE,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC;IAEM,SAAS,CAAC,SAAyB,EAAE,OAAuB;QACjE,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACxD,CAAC;IAED,IAAW,cAAc;QACvB,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC;IACzC,CAAC;IAEM,QAAQ;QACb,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,CAAC;IAC1C,CAAC;CACF;AA/DD,0EA+DC","sourcesContent":["import { KeysMergeBindingsContext } from '@comunica/context-entries';\nimport type {\n  BindingsStream,\n  FragmentSelectorShape,\n  IActionContext,\n  IQueryBindingsOptions,\n  IQuerySource,\n  MetadataBindings,\n} from '@comunica/types';\nimport { Bindings } from '@comunica/utils-bindings-factory';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A IQuerySource wrapper that skolemizes outgoing quads and bindings.\n */\nexport class QuerySourceAddSourceAttribution implements IQuerySource {\n  /**\n   * The query source to wrap over.\n   */\n  public readonly innerSource: IQuerySource;\n\n  public constructor(innerSource: IQuerySource) {\n    this.innerSource = innerSource;\n  }\n\n  public async getSelectorShape(context: IActionContext): Promise<FragmentSelectorShape> {\n    return this.innerSource.getSelectorShape(context);\n  }\n\n  public queryBindings(\n    operation: Algebra.Operation,\n    context: IActionContext,\n    options: IQueryBindingsOptions | undefined,\n  ): BindingsStream {\n    return this.addSourceUrlToBindingContext(this.innerSource.queryBindings(operation, context, options));\n  }\n\n  public addSourceUrlToBindingContext(iterator: BindingsStream): BindingsStream {\n    const ret = iterator.map((bindings) => {\n      if (bindings instanceof Bindings) {\n        bindings = bindings.setContextEntry(\n          KeysMergeBindingsContext.sourcesBinding,\n          [ this.innerSource.referenceValue ],\n        );\n      }\n      return bindings;\n    });\n\n    function inheritMetadata(): void {\n      iterator.getProperty('metadata', (metadata: MetadataBindings) => {\n        ret.setProperty('metadata', metadata);\n        metadata.state.addInvalidateListener(inheritMetadata);\n      });\n    }\n    inheritMetadata();\n\n    return ret;\n  }\n\n  public queryBoolean(operation: Algebra.Ask, context: IActionContext): Promise<boolean> {\n    return this.innerSource.queryBoolean(operation, context);\n  }\n\n  public queryQuads(operation: Algebra.Operation, context: IActionContext): AsyncIterator<RDF.Quad> {\n    return this.innerSource.queryQuads(operation, context);\n  }\n\n  public queryVoid(operation: Algebra.Update, context: IActionContext): Promise<void> {\n    return this.innerSource.queryVoid(operation, context);\n  }\n\n  public get referenceValue(): string | RDF.Source {\n    return this.innerSource.referenceValue;\n  }\n\n  public toString(): string {\n    return `${this.innerSource.toString()}`;\n  }\n}\n"]}