{"version":3,"file":"ActorRdfJoinMultiSequential.js","sourceRoot":"","sources":["ActorRdfJoinMultiSequential.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  IActionRdfJoin,\n  IActorRdfJoinOutputInner,\n  IActorRdfJoinArgs,\n  MediatorRdfJoin,\n  IActorRdfJoinTestSideData,\n} from '@comunica/bus-rdf-join';\nimport { ActorRdfJoin } from '@comunica/bus-rdf-join';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { TestResult } from '@comunica/core';\nimport { passTestWithSideData } from '@comunica/core';\nimport type { IMediatorTypeJoinCoefficients } from '@comunica/mediatortype-join-coefficients';\nimport type { IJoinEntry, ComunicaDataFactory } from '@comunica/types';\nimport { getSafeBindings } from '@comunica/utils-query-operation';\nimport { Factory } from 'sparqlalgebrajs';\n\n/**\n * A Multi Sequential RDF Join Actor.\n * It accepts 3 or more streams, joins the first two, and joins the result with the remaining streams.\n */\nexport class ActorRdfJoinMultiSequential extends ActorRdfJoin {\n  public readonly mediatorJoin: MediatorRdfJoin;\n\n  public constructor(args: IActorRdfJoinMultiSequentialArgs) {\n    super(args, {\n      logicalType: 'inner',\n      physicalName: 'multi-sequential',\n      limitEntries: 3,\n      limitEntriesMin: true,\n      canHandleUndefs: true,\n      isLeaf: false,\n    });\n  }\n\n  protected async getOutput(action: IActionRdfJoin): Promise<IActorRdfJoinOutputInner> {\n    const dataFactory: ComunicaDataFactory = action.context.getSafe(KeysInitQuery.dataFactory);\n    const algebraFactory = new Factory(dataFactory);\n\n    // Join the two first streams, and then join the result with the remaining streams\n    const firstEntry: IJoinEntry = {\n      output: getSafeBindings(await this.mediatorJoin\n        .mediate({ type: action.type, entries: [ action.entries[0], action.entries[1] ], context: action.context })),\n      operation: algebraFactory\n        .createJoin([ action.entries[0].operation, action.entries[1].operation ], false),\n    };\n    const remainingEntries: IJoinEntry[] = action.entries.slice(1);\n    remainingEntries[0] = firstEntry;\n    return {\n      result: await this.mediatorJoin.mediate({\n        type: action.type,\n        entries: remainingEntries,\n        context: action.context,\n      }),\n    };\n  }\n\n  protected async getJoinCoefficients(\n    action: IActionRdfJoin,\n    sideData: IActorRdfJoinTestSideData,\n  ): Promise<TestResult<IMediatorTypeJoinCoefficients, IActorRdfJoinTestSideData>> {\n    const { metadatas } = sideData;\n    const requestInitialTimes = ActorRdfJoin.getRequestInitialTimes(metadatas);\n    const requestItemTimes = ActorRdfJoin.getRequestItemTimes(metadatas);\n    return passTestWithSideData({\n      iterations: metadatas[0].cardinality.value * metadatas[1].cardinality.value *\n        metadatas.slice(2).reduce((acc, metadata) => acc * metadata.cardinality.value, 1),\n      persistedItems: 0,\n      blockingItems: 0,\n      requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] +\n        requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1] +\n        metadatas.slice(2)\n          .reduce((sum, metadata, i) => sum + requestInitialTimes[i] +\n            metadata.cardinality.value * requestItemTimes[i], 0),\n    }, sideData);\n  }\n}\n\nexport interface IActorRdfJoinMultiSequentialArgs extends IActorRdfJoinArgs {\n  /**\n   * A mediator for joining Bindings streams\n   */\n  mediatorJoin: MediatorRdfJoin;\n}\n"]}