{"version":3,"file":"ActorRdfJoinOptionalOptPlus.js","sourceRoot":"","sources":["ActorRdfJoinOptionalOptPlus.ts"],"names":[],"mappings":";;;AAOA,yDAEgC;AAEhC,yCAAsD;AAEtD,iDAA8C;AAE9C;;GAEG;AACH,MAAa,2BAA4B,SAAQ,2BAAY;IAG3D,YAAmB,IAA0C;QAC3D,KAAK,CAAC,IAAI,EAAE;YACV,WAAW,EAAE,UAAU;YACvB,YAAY,EAAE,aAAa;YAC3B,YAAY,EAAE,CAAC;YACf,eAAe,EAAE,IAAI;SACtB,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,OAAO,EAAkB;QACzD,MAAM,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;QAC9D,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;QAC5E,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QACpF,OAAO,EAAE,MAAM,EAAE;gBACf,IAAI,EAAE,UAAU;gBAChB,cAAc,EAAE,IAAI,6BAAa,CAAC,CAAE,YAAY,EAAE,MAAM,CAAC,cAAc,CAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;gBAChG,QAAQ,EAAE,KAAK,IAAG,EAAE,CAAC,MAAM,IAAI,CAAC,uBAAuB,CACrD,OAAO,EACP,MAAM,2BAAY,CAAC,YAAY,CAAC,OAAO,CAAC,EACxC,OAAO,EACP,EAAE,EACF,IAAI,CACL;aACF,EAAC,CAAC;IACL,CAAC;IAES,KAAK,CAAC,mBAAmB,CACjC,MAAsB,EACtB,QAAmC;QAEnC,OAAO,IAAA,2BAAoB,EAAC;YAC1B,UAAU,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK;YAC7F,cAAc,EAAE,CAAC;YACjB,aAAa,EAAE,CAAC;YAChB,WAAW,EAAE,CAAC;SACf,EAAE,QAAQ,CAAC,CAAC;IACf,CAAC;CACF;AAxCD,kEAwCC","sourcesContent":["import type {\n  IActionRdfJoin,\n  IActorRdfJoinOutputInner,\n  IActorRdfJoinArgs,\n  MediatorRdfJoin,\n  IActorRdfJoinTestSideData,\n} from '@comunica/bus-rdf-join';\nimport {\n  ActorRdfJoin,\n} from '@comunica/bus-rdf-join';\nimport type { TestResult } from '@comunica/core';\nimport { passTestWithSideData } from '@comunica/core';\nimport type { IMediatorTypeJoinCoefficients } from '@comunica/mediatortype-join-coefficients';\nimport { UnionIterator } from 'asynciterator';\n\n/**\n * A comunica Optional Opt+ RDF Join Actor.\n */\nexport class ActorRdfJoinOptionalOptPlus extends ActorRdfJoin {\n  public readonly mediatorJoin: MediatorRdfJoin;\n\n  public constructor(args: IActorRdfJoinOptionalOptPlusJoinArgs) {\n    super(args, {\n      logicalType: 'optional',\n      physicalName: 'nested-loop',\n      limitEntries: 2,\n      canHandleUndefs: true,\n    });\n  }\n\n  public async getOutput({ entries, context }: IActionRdfJoin): Promise<IActorRdfJoinOutputInner> {\n    const clonedStream = entries[0].output.bindingsStream.clone();\n    entries[0].output.bindingsStream = entries[0].output.bindingsStream.clone();\n    const joined = await this.mediatorJoin.mediate({ type: 'inner', entries, context });\n    return { result: {\n      type: 'bindings',\n      bindingsStream: new UnionIterator([ clonedStream, joined.bindingsStream ], { autoStart: false }),\n      metadata: async() => await this.constructResultMetadata(\n        entries,\n        await ActorRdfJoin.getMetadatas(entries),\n        context,\n        {},\n        true,\n      ),\n    }};\n  }\n\n  protected async getJoinCoefficients(\n    action: IActionRdfJoin,\n    sideData: IActorRdfJoinTestSideData,\n  ): Promise<TestResult<IMediatorTypeJoinCoefficients, IActorRdfJoinTestSideData>> {\n    return passTestWithSideData({\n      iterations: sideData.metadatas[0].cardinality.value + sideData.metadatas[1].cardinality.value,\n      persistedItems: 0,\n      blockingItems: 0,\n      requestTime: 0,\n    }, sideData);\n  }\n}\n\nexport interface IActorRdfJoinOptionalOptPlusJoinArgs extends IActorRdfJoinArgs {\n  /**\n   * A mediator for joining Bindings streams\n   */\n  mediatorJoin: MediatorRdfJoin;\n}\n"]}