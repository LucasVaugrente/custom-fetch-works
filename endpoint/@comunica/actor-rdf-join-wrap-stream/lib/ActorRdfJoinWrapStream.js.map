{"version":3,"file":"ActorRdfJoinWrapStream.js","sourceRoot":"","sources":["ActorRdfJoinWrapStream.ts"],"names":[],"mappings":";;;AAQA,yDAAsD;AAEtD,yCAAkF;AAMlF;;GAEG;AACH,MAAa,sBAAuB,SAAQ,2BAAY;IAItD,YAAmB,IAAiC;QAClD,KAAK,CAAC,IAAI,EAAE;YACV,WAAW,EAAE,OAAO;YACpB,YAAY,EAAE,aAAa;YAC3B,YAAY,EAAE,CAAC;YACf,eAAe,EAAE,IAAI;YACrB,eAAe,EAAE,IAAI;YACrB,MAAM,EAAE,KAAK;SACd,CAAC,CAAC;IACL,CAAC;IAEe,KAAK,CAAC,IAAI,CAAC,MAAsB;QAE/C,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,oCAA4B,CAAC,KAAK,MAAM,CAAC,OAAO,EAAE,CAAC;YACxE,OAAO,IAAA,eAAQ,EAAC,8CAA8C,CAAC,CAAC;QAClE,CAAC;QAED,MAAM,SAAS,GAAG,MAAM,2BAAY,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAClE,OAAO,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;IAC/D,CAAC;IAEe,KAAK,CAAC,SAAS,CAAC,MAAsB;QACpD,2FAA2F;QAC3F,mDAAmD;QACnD,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QAChE,MAAM,MAAM,GAAkC,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAEtF,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,CAAC,MAAM,IAAI,CAAC,yBAAyB,CAAC,OAAO,CACxE;YACE,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,SAAS,EAAE,MAAM,CAAC,IAAI;YACtB,MAAM,EAAE,MAAM,CAAC,cAAc;YAC7B,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,OAAO,EAAE,MAAM,CAAC,OAAO;YACvB,cAAc,EAAE,MAAM;SACvB,CACF,CAAC,CAAC;QAEH,MAAM,CAAC,cAAc,GAAiC,MAAM,CAAC;QAC7D,MAAM,CAAC,QAAQ,GAAqC,QAAQ,CAAC;QAE7D,OAAO,EAAE,MAAM,EAAE,CAAC;IACpB,CAAC;IAES,KAAK,CAAC,mBAAmB,CACjC,OAAuB,EACvB,QAAmC;QAEnC,OAAO,IAAA,2BAAoB,EAAC;YAC1B,UAAU,EAAE,CAAC,CAAC;YACd,cAAc,EAAE,CAAC,CAAC;YAClB,aAAa,EAAE,CAAC,CAAC;YACjB,WAAW,EAAE,CAAC,CAAC;SAChB,EAAE,QAAQ,CAAC,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACI,iBAAiB,CAAC,MAAsB,EAAE,OAAuB;QACtE,OAAO,OAAO,CAAC,GAAG,CAAC,oCAA4B,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IACnE,CAAC;CACF;AArED,wDAqEC;AAaD;;GAEG;AACU,QAAA,4BAA4B,GAAG,IAAI,uBAAgB,CAC9D,kCAAkC,CACnC,CAAC","sourcesContent":["import type { MediatorIteratorTransform } from '@comunica/bus-iterator-transform';\nimport type {\n  IActionRdfJoin,\n  IActorRdfJoinOutputInner,\n  IActorRdfJoinArgs,\n  MediatorRdfJoin,\n  IActorRdfJoinTestSideData }\n  from '@comunica/bus-rdf-join';\nimport { ActorRdfJoin } from '@comunica/bus-rdf-join';\nimport type { TestResult } from '@comunica/core';\nimport { ActionContextKey, failTest, passTestWithSideData } from '@comunica/core';\nimport type { IMediatorTypeJoinCoefficients } from '@comunica/mediatortype-join-coefficients';\nimport type { IActionContext, IJoinEntry, IQueryOperationResultBindings, MetadataBindings } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\n\n/**\n * A comunica Wrap Stream RDF Join Actor.\n */\nexport class ActorRdfJoinWrapStream extends ActorRdfJoin {\n  public readonly mediatorJoin: MediatorRdfJoin;\n  public readonly mediatorIteratorTransform: MediatorIteratorTransform;\n\n  public constructor(args: IActorRdfJoinWrapStreamArgs) {\n    super(args, {\n      logicalType: 'inner',\n      physicalName: 'wrap-stream',\n      limitEntries: 0,\n      limitEntriesMin: true,\n      canHandleUndefs: true,\n      isLeaf: false,\n    });\n  }\n\n  public override async test(action: IActionRdfJoin):\n  Promise<TestResult<IMediatorTypeJoinCoefficients, IActorRdfJoinTestSideData>> {\n    if (action.context.get(KEY_CONTEXT_WRAPPED_RDF_JOIN) === action.entries) {\n      return failTest('Unable to wrap join operation multiple times');\n    }\n\n    const metadatas = await ActorRdfJoin.getMetadatas(action.entries);\n    return await this.getJoinCoefficients(action, { metadatas });\n  }\n\n  public override async getOutput(action: IActionRdfJoin): Promise<IActorRdfJoinOutputInner> {\n    // Prevent infinite recursion. In consequent query operation calls this key is set to false\n    // To allow the operation to wrap ALL rdf-join runs\n    action.context = this.setContextWrapped(action, action.context);\n    const result: IQueryOperationResultBindings = await this.mediatorJoin.mediate(action);\n\n    const { stream, metadata } = (await this.mediatorIteratorTransform.mediate(\n      {\n        type: result.type,\n        operation: action.type,\n        stream: result.bindingsStream,\n        metadata: result.metadata,\n        context: action.context,\n        originalAction: action,\n      },\n    ));\n\n    result.bindingsStream = <AsyncIterator<RDF.Bindings>> stream;\n    result.metadata = <() => Promise<MetadataBindings>> metadata;\n\n    return { result };\n  }\n\n  protected async getJoinCoefficients(\n    _action: IActionRdfJoin,\n    sideData: IActorRdfJoinTestSideData,\n  ): Promise<TestResult<IMediatorTypeJoinCoefficients, IActorRdfJoinTestSideData>> {\n    return passTestWithSideData({\n      iterations: -1,\n      persistedItems: -1,\n      blockingItems: -1,\n      requestTime: -1,\n    }, sideData);\n  }\n\n  /**\n   * Sets KEY_CONTEXT_WRAPPED_RDF_JOIN key in the context to the entries being joined.\n   * @param action The join action being executed\n   * @param context The ActionContext\n   * @returns The updated ActionContext\n   */\n  public setContextWrapped(action: IActionRdfJoin, context: IActionContext): IActionContext {\n    return context.set(KEY_CONTEXT_WRAPPED_RDF_JOIN, action.entries);\n  }\n}\n\nexport interface IActorRdfJoinWrapStreamArgs extends IActorRdfJoinArgs {\n  /**\n   * Mediator that runs all transforms defined by user over the output stream of the query operation\n   */\n  mediatorIteratorTransform: MediatorIteratorTransform;\n  /**\n   * Mediator that calls next join to be wrapped\n   */\n  mediatorJoin: MediatorRdfJoin;\n}\n\n/**\n * Key that shows if the query operation has already been wrapped by a process iterator call\n */\nexport const KEY_CONTEXT_WRAPPED_RDF_JOIN = new ActionContextKey<IJoinEntry[]>(\n  '@comunica/actor-rdf-join:wrapped',\n);\n"]}