{"version":3,"file":"package.js","sourceRoot":"","sources":["package.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport * as fs from 'node:fs';\nimport * as Path from 'node:path';\nimport { compileConfig } from 'componentsjs';\nimport type { ParsedArgs } from 'minimist';\n\nimport minimist = require('minimist');\n\nconst process: NodeJS.Process = require('process/');\n\nconst args: ParsedArgs = minimist(process.argv.slice(2));\nif (args._.length > 0 || args.h || args.help) {\n  process.stderr.write(`comunica-package packages a Comunica config file into a new NPM package\n\nUsage:\n  comunica-package -c config.jsonld -o my-engine\n  cat config.jsonld | comunica-package -o my-engine\n\nOptions:\n  -o      The package name to generate, if not provided, the list of dependencies is printed to stdout.\n  -c      Path to a Comunica config file, if not provided, the config must be provided via stdin\n  -p      The main module path, if not provided, this defaults to the directory of the packager\n  -e      The instance by config URI that will be exported, by default this is the provided instance URI.\n  --help  print this help message\n`);\n  process.exit(1);\n}\n\n// Check if the package name is valid\nconst packageName = args.o;\nlet packageJson: any | undefined;\nif (packageName) {\n  if (!/^[\\dA-Za-z-]*$/u.test(packageName)) {\n    throw new Error(`Invalid package name: ${packageName}`);\n  }\n\n  /* eslint-disable no-sync */\n\n  // Make the target package directory if it does not exist yet.\n  packageJson = {};\n  if (!fs.existsSync(packageName)) {\n    fs.mkdirSync(packageName);\n  } else if (!fs.statSync(packageName).isDirectory()) {\n    throw new Error('The target package already exists, but it is not a directory!');\n  } else if (fs.existsSync(`${packageName}/package.json`)) {\n    // Reuse contents if a package.json file already exists\n\n    packageJson = require(`${process.cwd()}/${packageName}/package.json`);\n  }\n}\n\nconst configPath: string = args.c ? args.c : '.';\n\nconst mainModulePath: string = args.p ? Path.resolve(process.cwd(), args.p) : Path.join(__dirname, '..');\n\nlet exportVariableName: string | undefined;\nif (args.e) {\n  exportVariableName = args.e;\n}\n\nconst dependencyRegex = /require\\('([^']*)'\\)/ug;\n\ncompileConfig(mainModulePath, configPath, 'urn:comunica:default:Runner', exportVariableName, false, true)\n  .then((document: string) => {\n    // Find dependency package names\n    const dependencies: Record<string, string> = {};\n    let match;\n    const dependencyNames: string[] = [];\n    // eslint-disable-next-line no-cond-assign\n    while (match = dependencyRegex.exec(document)) {\n      dependencyNames.push(match[1]);\n    }\n    for (const dependencyName of dependencyNames.sort()) {\n      const packageJsonDependency = require(`${dependencyName}/package.json`);\n      dependencies[dependencyName] = `^${packageJsonDependency.version}`;\n    }\n\n    if (packageJson) {\n      // Build our package.json file\n      packageJson.name = packageName;\n      packageJson.main = 'index.js';\n      packageJson.dependencies = dependencies;\n\n      // Write output files\n      fs.writeFileSync(`${packageName}/index.js`, document);\n      fs.writeFileSync(`${packageName}/package.json`, JSON.stringify(packageJson, null, '  '));\n    } else {\n      // If no output package was provided, print the dependency list to stdout\n      process.stdout.write(`${JSON.stringify(dependencies, null, '  ')}\\n`);\n    }\n  }).catch(error => process.stderr.write(`${error}\\n`));\n\n/* eslint-enable no-sync */\n"]}