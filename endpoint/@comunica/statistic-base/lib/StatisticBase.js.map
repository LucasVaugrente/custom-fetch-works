{"version":3,"file":"StatisticBase.js","sourceRoot":"","sources":["StatisticBase.ts"],"names":[],"mappings":";;;AAEA;;;GAGG;AACH,MAAsB,aAAa;IAAnC;QACmB,cAAS,GAAkC,EAAE,CAAC;IAkCjE,CAAC;IAhCQ,EAAE,CAAC,QAAmC;QAC3C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,cAAc,CAAC,QAAmC;QACvD,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACnD,OAAO,IAAI,CAAC;QACd,CAAC;QACD,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YACpD,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE,CAAC;gBACnC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,IAAI,CAAC,IAAgB;QAC1B,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACnD,OAAO,KAAK,CAAC;QACf,CAAC;QACD,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACtC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACjB,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,YAAY;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;CAGF;AAnCD,sCAmCC","sourcesContent":["import type { IStatisticBase } from '@comunica/types';\n\n/**\n * Base class for statistics with event emitter logic implemented. Statistic tracker implementations\n * should only define their updateStatistic function.\n */\nexport abstract class StatisticBase<TEventData> implements IStatisticBase<TEventData> {\n  private readonly listeners: ((data: TEventData) => any)[] = [];\n\n  public on(listener: (data: TEventData) => any): StatisticBase<TEventData> {\n    this.listeners.push(listener);\n    return this;\n  }\n\n  public removeListener(listener: (data: TEventData) => any): StatisticBase<TEventData> {\n    if (!this.listeners || this.listeners.length === 0) {\n      return this;\n    }\n    for (let i = this.listeners.length - 1; i >= 0; i--) {\n      if (this.listeners[i] === listener) {\n        this.listeners.splice(i, 1);\n      }\n    }\n    return this;\n  }\n\n  public emit(data: TEventData): boolean {\n    if (!this.listeners || this.listeners.length === 0) {\n      return false;\n    }\n    for (const listener of this.listeners) {\n      listener(data);\n    }\n    return true;\n  }\n\n  public getListeners(): ((data: TEventData) => any)[] {\n    return this.listeners;\n  }\n\n  public abstract updateStatistic(...data: any[]): void;\n}\n"]}